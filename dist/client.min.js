/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(1);
	__webpack_require__(5);
	
	function getMousePos(canvas, evt) {
	  var rect = canvas.getBoundingClientRect();
	  return {
	    x: evt.clientX - rect.left,
	    y: evt.clientY - rect.top
	  };
	}
	
	window.requestAnimFrame = function (callback) {
	  return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {
	    window.setTimeout(callback, 1000 / 60);
	  };
	}();
	
	var statsEl = document.getElementById('stats');
	var radiusEl = document.getElementById('radiusValue');
	var layer1 = document.getElementById('layer1');
	var ctx1 = layer1.getContext('2d');
	var layer2 = document.getElementById('layer2');
	var ctx2 = layer2.getContext('2d');
	
	var lastMousePosX;
	var lastMousePosY;
	var radius = 40;
	var currentColor = 'red';
	
	function drawShape(x, y, context) {
	  context.beginPath();
	  context.moveTo(lastMousePosX, lastMousePosY);
	  context.lineTo(x, y);
	  context.lineWidth = radius;
	  context.strokeStyle = currentColor;
	  context.lineCap = 'round';
	  context.stroke();
	}
	
	function drawBrush(x, y, context) {
	  context.clearRect(0, 0, 1200, 800);
	  context.beginPath();
	  context.arc(x, y, radius / 2, 0, 2 * Math.PI, false);
	  context.lineWidth = 1;
	  context.strokeStyle = '#333';
	  context.stroke();
	}
	
	document.getElementById('canvasContain').addEventListener('mousemove', function (evt) {
	  var mousePos = getMousePos(layer1, evt);
	  statsEl.innerHTML = mousePos.x + ',' + mousePos.y;
	
	  if (evt.which == 1) {
	    ctx2.clearRect(0, 0, 1200, 800);
	    drawShape(mousePos.x, mousePos.y, ctx1);
	  } else {
	    drawBrush(mousePos.x, mousePos.y, ctx2);
	  }
	
	  lastMousePosX = mousePos.x;
	  lastMousePosY = mousePos.y;
	}, false);
	
	// Size Adjust
	document.getElementById('increaseRadius').addEventListener('click', function () {
	  radius += 5;
	  radiusEl.innerHTML = radius;
	});
	document.getElementById('decreaseRadius').addEventListener('click', function () {
	  if (radius > 5) {
	    radius -= 5;
	    radiusEl.innerHTML = radius;
	  }
	});
	
	// Clear screen
	document.getElementById('clearScreen').addEventListener('click', function () {
	  ctx1.clearRect(0, 0, 1200, 800);
	});
	
	// Color Boxes
	var boxes = document.getElementsByClassName('color-box');
	var i = null;
	for (i = 0; i < boxes.length; i++) {
	  var colorBox = boxes[i];
	  colorBox.addEventListener('click', function (e) {
	    currentColor = this.getAttribute('data-color');
	    document.getElementById('currentColor').style.background = currentColor;
	  });
	}
	
	function download() {
	  var dt = layer1.toDataURL('image/jpeg');
	  this.href = dt;
	};
	document.getElementById('save').addEventListener('click', download, false);

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(2);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(4)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../node_modules/css-loader/index.js!./style.css", function() {
				var newContent = require("!!./../../node_modules/css-loader/index.js!./style.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(3)();
	// imports
	
	
	// module
	exports.push([module.id, "html {\n  cursor: pointer;\n}\n\nbody {\n  margin: 0px;\n  padding: 0px;\n  background-color: #ddd;\n}\n\nheader {\n  font-family: 'Gloria Hallelujah', cursive;\n  text-align: center;\n  height: 120px;\n}\n\nheader h1 {\n  font-size: 5em;\n  color: #FF78C7;\n  line-height: .5em;\n  text-shadow: 2px 2px white;\n\n}\n\n.doodle-art {\n  width: 100%;\n}\n\n.centered-container {\n  width: 1200px;\n  margin: 0 auto;\n\n}\n\n#canvasContain {\n  border: 10px solid #ccc;\n  width: 1200px;\n  height: 800px;\n  margin-bottom: 30px;\n  cursor: none;\n  position: relative;\n}\n\n#layer1,\n#layer2 {\n  position: absolute;\n  top: 0px;\n  left: 0px;\n}\n\n#layer1 {\n  background-color: white;\n  z-index: 2;\n}\n\n#layer2 {\n  z-index: 3;\n}\n\n.tools {\n  display: block;\n}\n\n.tool {\n  background-color: #ddd;\n  border: 10px solid #ccc;\n  width: 320px;\n  height: auto;\n  text-align: center;\n  padding: 0 1em 1em 1em;\n  float: left;\n\n}\n\n.tool__buttons {\n  font-size: 1em;\n  padding: 0 20px;\n}\n\n.tool__value {\n  font-size: 2em;\n  color: #fff;\n}\n\n.color-box {\n  width: 50px;\n  height: 50px;\n  border: 1px solid #aaa;\n  float: left;\n}\n\n.current-color {\n  width: 100px;\n  height: 100px;\n  background-color: red;\n}\n", ""]);
	
	// exports


/***/ },
/* 3 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	// css base code, injected by the css-loader
	module.exports = function() {
		var list = [];
	
		// return the list of modules as css string
		list.toString = function toString() {
			var result = [];
			for(var i = 0; i < this.length; i++) {
				var item = this[i];
				if(item[2]) {
					result.push("@media " + item[2] + "{" + item[1] + "}");
				} else {
					result.push(item[1]);
				}
			}
			return result.join("");
		};
	
		// import a list of modules into the list
		list.i = function(modules, mediaQuery) {
			if(typeof modules === "string")
				modules = [[null, modules, ""]];
			var alreadyImportedModules = {};
			for(var i = 0; i < this.length; i++) {
				var id = this[i][0];
				if(typeof id === "number")
					alreadyImportedModules[id] = true;
			}
			for(i = 0; i < modules.length; i++) {
				var item = modules[i];
				// skip already imported module
				// this implementation is not 100% perfect for weird media query combinations
				//  when a module is imported multiple times with different media queries.
				//  I hope this will never occur (Hey this way we have smaller bundles)
				if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
					if(mediaQuery && !item[2]) {
						item[2] = mediaQuery;
					} else if(mediaQuery) {
						item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
					}
					list.push(item);
				}
			}
		};
		return list;
	};


/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isOldIE = memoize(function() {
			return /msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase());
		}),
		getHeadElement = memoize(function () {
			return document.head || document.getElementsByTagName("head")[0];
		}),
		singletonElement = null,
		singletonCounter = 0,
		styleElementsInsertedAtTop = [];
	
	module.exports = function(list, options) {
		if(false) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}
	
		options = options || {};
		// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isOldIE();
	
		// By default, add <style> tags to the bottom of <head>.
		if (typeof options.insertAt === "undefined") options.insertAt = "bottom";
	
		var styles = listToStyles(list);
		addStylesToDom(styles, options);
	
		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	}
	
	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}
	
	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}
	
	function insertStyleElement(options, styleElement) {
		var head = getHeadElement();
		var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];
		if (options.insertAt === "top") {
			if(!lastStyleElementInsertedAtTop) {
				head.insertBefore(styleElement, head.firstChild);
			} else if(lastStyleElementInsertedAtTop.nextSibling) {
				head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
			} else {
				head.appendChild(styleElement);
			}
			styleElementsInsertedAtTop.push(styleElement);
		} else if (options.insertAt === "bottom") {
			head.appendChild(styleElement);
		} else {
			throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
		}
	}
	
	function removeStyleElement(styleElement) {
		styleElement.parentNode.removeChild(styleElement);
		var idx = styleElementsInsertedAtTop.indexOf(styleElement);
		if(idx >= 0) {
			styleElementsInsertedAtTop.splice(idx, 1);
		}
	}
	
	function createStyleElement(options) {
		var styleElement = document.createElement("style");
		styleElement.type = "text/css";
		insertStyleElement(options, styleElement);
		return styleElement;
	}
	
	function createLinkElement(options) {
		var linkElement = document.createElement("link");
		linkElement.rel = "stylesheet";
		insertStyleElement(options, linkElement);
		return linkElement;
	}
	
	function addStyle(obj, options) {
		var styleElement, update, remove;
	
		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement(options));
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else if(obj.sourceMap &&
			typeof URL === "function" &&
			typeof URL.createObjectURL === "function" &&
			typeof URL.revokeObjectURL === "function" &&
			typeof Blob === "function" &&
			typeof btoa === "function") {
			styleElement = createLinkElement(options);
			update = updateLink.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
				if(styleElement.href)
					URL.revokeObjectURL(styleElement.href);
			};
		} else {
			styleElement = createStyleElement(options);
			update = applyToTag.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
			};
		}
	
		update(obj);
	
		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}
	
	var replaceText = (function () {
		var textStore = [];
	
		return function (index, replacement) {
			textStore[index] = replacement;
			return textStore.filter(Boolean).join('\n');
		};
	})();
	
	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;
	
		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}
	
	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;
	
		if(media) {
			styleElement.setAttribute("media", media)
		}
	
		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}
	
	function updateLink(linkElement, obj) {
		var css = obj.css;
		var sourceMap = obj.sourceMap;
	
		if(sourceMap) {
			// http://stackoverflow.com/a/26603875
			css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
		}
	
		var blob = new Blob([css], { type: "text/css" });
	
		var oldSrc = linkElement.href;
	
		linkElement.href = URL.createObjectURL(blob);
	
		if(oldSrc)
			URL.revokeObjectURL(oldSrc);
	}


/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(6);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(4)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../node_modules/css-loader/index.js!./button.css", function() {
				var newContent = require("!!./../../node_modules/css-loader/index.js!./button.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(3)();
	// imports
	
	
	// module
	exports.push([module.id, ".button{\n  background-image: -webkit-linear-gradient(top, #f4f1ee, #fff);\n  background-image: linear-gradient(top, #f4f1ee, #fff);\n  border-radius: 50%;\n  box-shadow: 0px 8px 10px 0px rgba(0, 0, 0, .3), inset 0px 4px 1px 1px white, inset 0px -3px 1px 1px rgba(204,198,197,.5);\n  float:left;\n  height: 70px;\n  margin: 0 20px 20px 0;\n  position: relative;\n  width: 70px;\n  -webkit-transition: all .1s linear;\n  transition: all .1s linear;\n}\n\n.tool .button:last-child {\n  margin-right: 0;\n}\n\n.button:after{\n  color:#e9e6e4;\n  content: \"\";\n  display: block;\n  font-size: 3em;\n  height: 2em;\n  text-decoration: none;\n  text-shadow: 0px -1px 1px #bdb5b4, 1px 1px 1px white;\n  position: absolute;\n  width: 30px;\n}\n\n\n.plus:after{\n  content: \"+\";\n  left: 20px;\n  top: 8px;\n}\n\n.minus:after{\n  content: \"-\";\n  left: 20px;\n  top: 7px;\n}\n\n.ex:after {\n  content: \"x\";\n  left: 20px;\n  top: 5px;\n}\n\n\n.button:hover{\n  background-image: -webkit-linear-gradient(top, #fff, #f4f1ee);\n  background-image: linear-gradient(top, #fff, #f4f1ee);\n  color:#0088cc;\n}\n\n\n.plus:hover:after{\n  color:#83d244;\n  text-shadow:0px 0px 6px #83d244;\n}\n\n.minus:hover:after{\n  color:#eb2f2f;\n  text-shadow:0px 0px 6px #eb2f2f;\n}\n\n.ex:hover:after{\n  color:#eb2f2f;\n  text-shadow:0px 0px 6px #eb2f2f;\n}\n\n.button:active{\n  background-image: -webkit-linear-gradient(top, #efedec, #f7f4f4);\n  background-image: linear-gradient(top, #efedec, #f7f4f4);\n  box-shadow: 0 3px 5px 0 rgba(0,0,0,.4), inset 0px -3px 1px 1px rgba(204,198,197,.5);\n}\n\n.button:active:after{\n  color:#dbd2d2;\n  text-shadow: 0px -1px 1px #bdb5b4, 0px 1px 1px white;\n}\n", ""]);
	
	// exports


/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,